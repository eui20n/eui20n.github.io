---
layout: single 
title: "백준 3687 성냥개비"
date: 2025-02-12 00:00:00 +0900 
last_modified_at : 2025-02-12 00:00:00 +0900 
categories: [Algorithm]
tags: [Java, 백준]
toc: true
toc_sticky: true
permalink: /:categories/:title # 해당 포스트의 링크 커스텀 마이징

comments: true
---
# 한 줄 평가
- **그리고**와 **DP**로 로직을 떠올리는 것이 어렵지 않다. 
- **굳이 안풀어도 상관없는 문제**라고 판단된다. 

# 문제 설명
![성냥](/assets/images/2025-02-12-백준-3687-성냥개비/성냥%20수.png)   

위 그림 처럼 성냥을 이용해서 숫자를 표현할 수 있다. 이 때, 입력으로 들어오는 성냥의 개수로 표현할 수 있는 숫자 중 최소값과 최대값을 구해라.   

자세한 설명은 [문제 링크](https://www.acmicpc.net/problem/3687) 에서 확인 하면 된다.   

조건
- t >= 100 (t는 테스트 케이스)
- 2 <= n <= 100 (n은 성냥의 개수)
   

# 로직 설명
문제 문제에서 주어진 최대 테스트 케이스는 100이다. 그리고 성냥의 최대 수도 100개이다. 즉, 각각의 성냥으로 표현 가능한 수를 입력 받을 때마다 구하는 것이 아닌 길이가 100인 배열에 미리 구해주면 된다.   

로직을 설명하기 전에 0부터 9까지 표현하는데 소모되는 성냥의 개수이다.   

|---|---|
|수|성냥 수|
|:---:|:---:|
|0|6개|
|1|2개|
|2|5개|
|3|5개|
|4|4개|
|5|5개|
|6|6개|
|7|3개|
|8|7개|
|9|6개|   

그리고 최대값과 최소값의 로직이 서로 다르다. 최대값 로직, 최소값 로직 순으로 설명하겠다.   

## 최대값 로직
**숫자가 최대값이 되려면 자릿수가 많으면 된다**. 1보다 11이 크듯이 자릿수가 크면 더 큰 값이다. 그래서 자릿수를 최대한 크게 만들어 주면 된다.   

그래서 **성냥이 가장 적게 소모되는 1(성냥 2개 소모)를 계속해서 만들어주면 된다.**   

하지만, 이렇게 되면 홀수가 들어오면 표현 못한다. 그래서 **홀수일 경우 가장 앞에 성냥이 3개 소모되는 7을 두면 된다.**   

즉, 홀수면 가장 앞에 7을 한 후, 남은 성냥 만큼 1을 붙이고, 짝수면 가능한 만큼 1을 붙이면 된다.   

그리고, 이렇게 붙이면 수가 커져서 long범위를 벗어난다. 이를 유의하며 문제를 풀면 된다.   

## 최소값 로직
최소값은 최대값과 다르게 long범위를 벗어나지 않는다. 그래서 long으로 문제를 풀어도 된다. 로직 설명하지 전에 long범위를 안 벗어나는 이유를 설명하겠다.   

최소값은 최대한 성냥이 많이 소모되는 수를 반복적으로 표현하면 된다. 그 수는 8로 성냥이 7개 소모된다. 성냥이 100개일 경우 성냥이 2개 소모되는 1과 7개 소모되는 8로 구성할 수 있다. 이 값은 188888888888888로 long 범위를 벗어나지 않는다.   

최소값 역시 미리 값을 구할 것이다. 그리고 **이전에 구한 값을 사용해서 현재의 값을 갱신**할 것이다. 즉, DP로 문제를 풀이할 것이다. 그래서 초기 배열을 만들고, 해당 배열을 이용해 이후의 값을 계속해서 계산하고 갱신하면 된다.   

# 코드
위를 생각하면서 코드 작성한 코드를 토글로 남기겠다.   

<details>
  <summary>코드</summary>

  <div markdown="1">

  ```
  import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int T = Integer.parseInt(br.readLine());
        for (int i = 0; i < T; i++) {
            int matchesCnt = Integer.parseInt(br.readLine());

            check(matchesCnt);
        }
    }

    static void check(int matchesCnt) {
        // 정답을 구해주는 메소드
        String[] maxArr = makeStringArr();
        long[][] minArr = makeMinArr();

        System.out.println(minArr[matchesCnt][0] + " " + maxArr[matchesCnt]);
    }

    static long[][] makeMinArr() {
        long[][] returnArr = initialArr();

        for (int i = 8; i < returnArr.length; i++) {
            for (int j = 2; j <= i - 2; j++) {
                // preNum와 sufNum로 구현했기 때문에 절반만 가는 것이 아니라 끝까지 가야함
                // 근데 여기서 i - 2 까지 가는 이유는, i - 1, i 즉, 1과 0으로 표현 가능한 숫자가 없기때문임
                long num = makeNum(j, i - j, returnArr);

                if (num < returnArr[i][0] || returnArr[i][0] == 0) {
                    // 값 갱신
                    returnArr[i][0] = num;
                    returnArr[i][1] = returnArr[j][1] + returnArr[i - j][1];
                }
            }
        }
        return returnArr;
    }

    static long makeNum(int preNum, int sufNum, long[][] arr) {
        if (arr[preNum][1] + arr[sufNum][1] > 64) {
            // 만약 만들어질 숫자가 long범위를 벗어나면 바로 종료하기
            return Long.MAX_VALUE;
        }

        StringBuilder sb = new StringBuilder();

        // preNum가 앞에, sufNum가 뒤에 붙기
        // 이렇게 하는 이유는 로직을 간단하게 하기 위해서
        // 이렇게 안하면 두개를 바꾸고, 6이면 0으로 바꾸는 등 로직이 복잡해짐
        sb.append(arr[preNum][0]);
        if (sufNum == 6) {
            sb.append(0);
        } else {
            sb.append(arr[sufNum][0]);
        }
        return Long.parseLong(sb.toString());
    }

    static String[] makeStringArr() {
        String[] returnArr = new String[101];

        for (int i = 2; i < returnArr.length; i++) {
            if (i % 2 == 0) {
                int oneCnt = i / 2;
                returnArr[i] = makeMaxNumToString(oneCnt, 0);
            }

            if (i % 2 == 1) {
                int oneCnt = (i - 3) / 2;
                returnArr[i] = makeMaxNumToString(oneCnt, 1);
            }
        }

        return returnArr;
    }

    static long[][] initialArr() {
        // 기본 배열 만들기
        long[][] returnArr = new long[101][2];

        returnArr[2][0] = 1;
        returnArr[3][0] = 7;
        returnArr[4][0] = 4;
        returnArr[5][0] = 2;
        returnArr[6][0] = 6;
        returnArr[7][0] = 8;

        returnArr[2][1] = 1;
        returnArr[3][1] = 1;
        returnArr[4][1] = 1;
        returnArr[5][1] = 1;
        returnArr[6][1] = 1;
        returnArr[7][1] = 1;

        return returnArr;
    }

    static String makeMaxNumToString(int oneCnt, int sevenCnt) {
        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < sevenCnt; i++) {
            sb.append("7");
        }

        for (int i = 0; i < oneCnt; i++) {
            sb.append("1");
        }

        return sb.toString();
    }
}
  ```

  </div>

</details>

## 결과
해당 코드를 제출한 결과이다.   

![결과](/assets/images/2025-02-12-백준-3687-성냥개비/결과.png)